{"version":3,"sources":["webpack:///./src/utils/timezone sync [A-Za-z0-9-_,\\s]+\\.json$/","webpack:///./src/utils/timezone/index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","loadTimeZone","timeZoneJson","require","data","forEach","key","matched","match","length","json","index","push","name","getFullTimeZone","strQuery","toLowerCase","timeZone","Promise","dataTimeZone","timeZoneName"],"mappings":"imjCAAA,IAAIA,EAAM,CACT,kBAAmB,QAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,Q,6KCLpB,SAASY,IACP,IAAMC,EAAeC,UACfC,EAAO,GAeb,OAbAF,EAAaN,OAAOS,SAAQ,SAAAC,GAC1B,IAAMC,EAAUD,EAAIE,MAAM,uBAC1B,GAAID,GAAWA,EAAQE,OAAS,EAAG,CACjC,IAAMC,EAAOR,EAAaI,GAC1B,IAAK,IAAMK,KAASD,EAClBN,EAAKQ,KAAK,CACRvB,GAAIsB,EACJE,KAAMH,EAAKC,SAMZP,EAGT,SAASU,EAAiBC,GACxB,IAAKA,GAAyB,KAAbA,EACf,MAAO,GAGT,IAAMb,EAAeC,UACfC,EAAO,GAkBb,OAjBAF,EAAaN,OAAOS,SAAQ,SAAAC,GAC1B,IAAMC,EAAUD,EAAIE,MAAM,uBAC1B,GAAID,GAAWA,EAAQE,OAAS,EAAG,CACjC,IAAMC,EAAOR,EAAaI,GAC1B,IAAK,IAAMK,KAASD,EAClB,GAAIC,EAAMK,gBAAkBD,EAASC,cAAe,CAClDZ,EAAKQ,KAAK,CACRvB,GAAIsB,EACJE,KAAMH,EAAKC,KAGb,WAMDP,EAGF,SAASa,IACd,OAAO,IAAIC,SAAQ,SAAApB,GACjB,IAAMqB,EAAelB,IACrBH,EAAQqB,MAIL,SAASC,EAAcd,GAC5B,IAAMa,EAAeL,EAAgBR,GAErC,OAAIa,GAAgBA,EAAa,GACxBA,EAAa,GAAGN,KAGlB","file":"js/chunk-70ced7b4.eca42758.js","sourcesContent":["var map = {\n\t\"./timezone.json\": \"5b93\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"d1be\";","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nfunction loadTimeZone () {\n  const timeZoneJson = require.context('./', true, /[A-Za-z0-9-_,\\s]+\\.json$/i)\n  const data = []\n\n  timeZoneJson.keys().forEach(key => {\n    const matched = key.match(/([A-Za-z0-9-_]+)\\./i)\n    if (matched && matched.length > 1) {\n      const json = timeZoneJson(key)\n      for (const index in json) {\n        data.push({\n          id: index,\n          name: json[index]\n        })\n      }\n    }\n  })\n\n  return data\n}\n\nfunction getFullTimeZone (strQuery) {\n  if (!strQuery || strQuery === '') {\n    return []\n  }\n\n  const timeZoneJson = require.context('./', true, /[A-Za-z0-9-_,\\s]+\\.json$/i)\n  const data = []\n  timeZoneJson.keys().forEach(key => {\n    const matched = key.match(/([A-Za-z0-9-_]+)\\./i)\n    if (matched && matched.length > 1) {\n      const json = timeZoneJson(key)\n      for (const index in json) {\n        if (index.toLowerCase() === strQuery.toLowerCase()) {\n          data.push({\n            id: index,\n            name: json[index]\n          })\n\n          break\n        }\n      }\n    }\n  })\n\n  return data\n}\n\nexport function timeZone () {\n  return new Promise(resolve => {\n    const dataTimeZone = loadTimeZone()\n    resolve(dataTimeZone)\n  })\n}\n\nexport function timeZoneName (key) {\n  const dataTimeZone = getFullTimeZone(key)\n\n  if (dataTimeZone && dataTimeZone[0]) {\n    return dataTimeZone[0].name\n  }\n\n  return ''\n}\n"],"sourceRoot":""}